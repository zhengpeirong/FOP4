{
  "header_types" : [
    {
      "name" : "scalars_0",
      "id" : 0,
      "fields" : [
        ["tmp", 32, false],
        ["tmp_0", 16, false],
        ["tmp_1", 32, false],
        ["tmp_2", 16, false],
        ["tmp_3", 32, false],
        ["tmp_4", 32, false],
        ["loadbalancer_temp", 16, false],
        ["loadbalancer_state_temp", 16, false],
        ["metadata_t.l4_srcPort", 16, false],
        ["metadata_t.l4_dstPort", 16, false],
        ["metadata_t.current_output", 16, false],
        ["metadata_t.hash_val", 32, false],
        ["metadata_t.tcpLength", 16, false],
        ["metadata_t.no_l2_fwd", 1, false],
        ["_padding_0", 7, false]
      ]
    },
    {
      "name" : "standard_metadata",
      "id" : 1,
      "fields" : [
        ["ingress_port", 9, false],
        ["egress_spec", 9, false],
        ["egress_port", 9, false],
        ["instance_type", 32, false],
        ["packet_length", 32, false],
        ["enq_timestamp", 32, false],
        ["enq_qdepth", 19, false],
        ["deq_timedelta", 32, false],
        ["deq_qdepth", 19, false],
        ["ingress_global_timestamp", 48, false],
        ["egress_global_timestamp", 48, false],
        ["mcast_grp", 16, false],
        ["egress_rid", 16, false],
        ["checksum_error", 1, false],
        ["parser_error", 32, false],
        ["priority", 3, false],
        ["_padding", 3, false]
      ]
    },
    {
      "name" : "ethernet_t",
      "id" : 2,
      "fields" : [
        ["dst_addr", 48, false],
        ["src_addr", 48, false],
        ["ether_type", 16, false]
      ]
    },
    {
      "name" : "ipv4_t",
      "id" : 3,
      "fields" : [
        ["version", 4, false],
        ["ihl", 4, false],
        ["diffserv", 8, false],
        ["len", 16, false],
        ["identification", 16, false],
        ["flags", 3, false],
        ["frag_offset", 13, false],
        ["ttl", 8, false],
        ["protocol", 8, false],
        ["hdr_checksum", 16, false],
        ["src_addr", 32, false],
        ["dst_addr", 32, false]
      ]
    },
    {
      "name" : "tcp_t",
      "id" : 4,
      "fields" : [
        ["srcPort", 16, false],
        ["dstPort", 16, false],
        ["seqNo", 32, false],
        ["ackNo", 32, false],
        ["dataOffset", 4, false],
        ["res", 4, false],
        ["flags", 8, false],
        ["window", 16, false],
        ["checksum", 16, false],
        ["urgentPtr", 16, false]
      ]
    },
    {
      "name" : "udp_t",
      "id" : 5,
      "fields" : [
        ["srcPort", 16, false],
        ["dstPort", 16, false]
      ]
    },
    {
      "name" : "packet_out_header_t",
      "id" : 6,
      "fields" : [
        ["egress_port", 16, false]
      ]
    },
    {
      "name" : "packet_in_header_t",
      "id" : 7,
      "fields" : [
        ["ingress_port", 16, false]
      ]
    }
  ],
  "headers" : [
    {
      "name" : "scalars",
      "id" : 0,
      "header_type" : "scalars_0",
      "metadata" : true,
      "pi_omit" : true
    },
    {
      "name" : "standard_metadata",
      "id" : 1,
      "header_type" : "standard_metadata",
      "metadata" : true,
      "pi_omit" : true
    },
    {
      "name" : "ethernet",
      "id" : 2,
      "header_type" : "ethernet_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "ipv4",
      "id" : 3,
      "header_type" : "ipv4_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "tcp",
      "id" : 4,
      "header_type" : "tcp_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "udp",
      "id" : 5,
      "header_type" : "udp_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "packet_out",
      "id" : 6,
      "header_type" : "packet_out_header_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "packet_in",
      "id" : 7,
      "header_type" : "packet_in_header_t",
      "metadata" : false,
      "pi_omit" : true
    }
  ],
  "header_stacks" : [],
  "header_union_types" : [],
  "header_unions" : [],
  "header_union_stacks" : [],
  "field_lists" : [],
  "errors" : [
    ["NoError", 0],
    ["PacketTooShort", 1],
    ["NoMatch", 2],
    ["StackOutOfBounds", 3],
    ["HeaderTooShort", 4],
    ["ParserTimeout", 5],
    ["ParserInvalidArgument", 6]
  ],
  "enums" : [],
  "parsers" : [
    {
      "name" : "parser",
      "id" : 0,
      "init_state" : "start",
      "parse_states" : [
        {
          "name" : "start",
          "id" : 0,
          "parser_ops" : [],
          "transitions" : [
            {
              "type" : "hexstr",
              "value" : "0x00ff",
              "mask" : null,
              "next_state" : "parse_packet_out"
            },
            {
              "type" : "default",
              "value" : null,
              "mask" : null,
              "next_state" : "parse_ethernet"
            }
          ],
          "transition_key" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "ingress_port"]
            }
          ]
        },
        {
          "name" : "parse_packet_out",
          "id" : 1,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "packet_out"
                }
              ],
              "op" : "extract"
            }
          ],
          "transitions" : [
            {
              "type" : "default",
              "value" : null,
              "mask" : null,
              "next_state" : "parse_ethernet"
            }
          ],
          "transition_key" : []
        },
        {
          "name" : "parse_ethernet",
          "id" : 2,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "ethernet"
                }
              ],
              "op" : "extract"
            }
          ],
          "transitions" : [
            {
              "type" : "hexstr",
              "value" : "0x0800",
              "mask" : null,
              "next_state" : "parse_ipv4"
            },
            {
              "type" : "default",
              "value" : null,
              "mask" : null,
              "next_state" : null
            }
          ],
          "transition_key" : [
            {
              "type" : "field",
              "value" : ["ethernet", "ether_type"]
            }
          ]
        },
        {
          "name" : "parse_ipv4",
          "id" : 3,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "ipv4"
                }
              ],
              "op" : "extract"
            },
            {
              "parameters" : [
                {
                  "type" : "field",
                  "value" : ["scalars", "metadata_t.tcpLength"]
                },
                {
                  "type" : "expression",
                  "value" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "+",
                          "left" : {
                            "type" : "field",
                            "value" : ["ipv4", "len"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffec"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffff"
                      }
                    }
                  }
                }
              ],
              "op" : "set"
            }
          ],
          "transitions" : [
            {
              "type" : "hexstr",
              "value" : "0x06",
              "mask" : null,
              "next_state" : "parse_tcp"
            },
            {
              "type" : "hexstr",
              "value" : "0x11",
              "mask" : null,
              "next_state" : "parse_udp"
            },
            {
              "type" : "default",
              "value" : null,
              "mask" : null,
              "next_state" : null
            }
          ],
          "transition_key" : [
            {
              "type" : "field",
              "value" : ["ipv4", "protocol"]
            }
          ]
        },
        {
          "name" : "parse_tcp",
          "id" : 4,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "tcp"
                }
              ],
              "op" : "extract"
            },
            {
              "parameters" : [
                {
                  "type" : "field",
                  "value" : ["scalars", "metadata_t.l4_srcPort"]
                },
                {
                  "type" : "field",
                  "value" : ["tcp", "srcPort"]
                }
              ],
              "op" : "set"
            },
            {
              "parameters" : [
                {
                  "type" : "field",
                  "value" : ["scalars", "metadata_t.l4_dstPort"]
                },
                {
                  "type" : "field",
                  "value" : ["tcp", "dstPort"]
                }
              ],
              "op" : "set"
            }
          ],
          "transitions" : [
            {
              "type" : "default",
              "value" : null,
              "mask" : null,
              "next_state" : null
            }
          ],
          "transition_key" : []
        },
        {
          "name" : "parse_udp",
          "id" : 5,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "udp"
                }
              ],
              "op" : "extract"
            },
            {
              "parameters" : [
                {
                  "type" : "field",
                  "value" : ["scalars", "metadata_t.l4_srcPort"]
                },
                {
                  "type" : "field",
                  "value" : ["udp", "srcPort"]
                }
              ],
              "op" : "set"
            },
            {
              "parameters" : [
                {
                  "type" : "field",
                  "value" : ["scalars", "metadata_t.l4_dstPort"]
                },
                {
                  "type" : "field",
                  "value" : ["udp", "dstPort"]
                }
              ],
              "op" : "set"
            }
          ],
          "transitions" : [
            {
              "type" : "default",
              "value" : null,
              "mask" : null,
              "next_state" : null
            }
          ],
          "transition_key" : []
        }
      ]
    }
  ],
  "parse_vsets" : [],
  "deparsers" : [
    {
      "name" : "deparser",
      "id" : 0,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 439,
        "column" : 8,
        "source_fragment" : "c_deparser"
      },
      "order" : ["packet_in", "ethernet", "ipv4", "tcp", "udp"],
      "primitives" : []
    }
  ],
  "meter_arrays" : [],
  "counter_arrays" : [
    {
      "name" : "c_ingress.tx_port_counter",
      "id" : 0,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 296,
        "column" : 48,
        "source_fragment" : "tx_port_counter"
      },
      "size" : 255,
      "is_direct" : false
    },
    {
      "name" : "c_ingress.rx_port_counter",
      "id" : 1,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 297,
        "column" : 48,
        "source_fragment" : "rx_port_counter"
      },
      "size" : 255,
      "is_direct" : false
    },
    {
      "name" : "c_ingress.l2_fwd_counter",
      "id" : 2,
      "is_direct" : true,
      "binding" : "c_ingress.t_l2_fwd",
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 322,
        "column" : 50,
        "source_fragment" : "l2_fwd_counter"
      }
    },
    {
      "name" : "c_ingress.loadbalancer.http_load_balancer_counter",
      "id" : 3,
      "is_direct" : true,
      "binding" : "c_ingress.loadbalancer.http_load_balancer",
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 217,
        "column" : 50,
        "source_fragment" : "http_load_balancer_counter"
      }
    },
    {
      "name" : "c_ingress.loadbalancer.other_direction_counter",
      "id" : 4,
      "is_direct" : true,
      "binding" : "c_ingress.loadbalancer.other_direction",
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 233,
        "column" : 50,
        "source_fragment" : "other_direction_counter"
      }
    }
  ],
  "register_arrays" : [
    {
      "name" : "c_ingress.loadbalancer.load_balancer",
      "id" : 0,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 180,
        "column" : 25,
        "source_fragment" : "load_balancer"
      },
      "size" : 1,
      "bitwidth" : 16
    },
    {
      "name" : "c_ingress.loadbalancer.state",
      "id" : 1,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 181,
        "column" : 29,
        "source_fragment" : "state"
      },
      "size" : 16384,
      "bitwidth" : 16
    }
  ],
  "calculations" : [
    {
      "name" : "calc",
      "id" : 0,
      "algo" : "crc16",
      "input" : [
        {
          "type" : "field",
          "value" : ["scalars", "tmp"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "tmp_0"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "tmp_1"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "tmp_2"]
        }
      ]
    },
    {
      "name" : "calc_0",
      "id" : 1,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 393,
        "column" : 8,
        "source_fragment" : "update_checksum( ..."
      },
      "algo" : "csum16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "version"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "ihl"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "diffserv"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "len"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "identification"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "flags"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "frag_offset"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "ttl"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "src_addr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dst_addr"]
        }
      ]
    },
    {
      "name" : "calc_1",
      "id" : 2,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 411,
        "column" : 8,
        "source_fragment" : "update_checksum_with_payload( ..."
      },
      "algo" : "csum16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "src_addr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dst_addr"]
        },
        {
          "type" : "hexstr",
          "value" : "0x00",
          "bitwidth" : 8
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        },
        {
          "type" : "field",
          "value" : ["scalars", "metadata_t.tcpLength"]
        },
        {
          "type" : "field",
          "value" : ["tcp", "srcPort"]
        },
        {
          "type" : "field",
          "value" : ["tcp", "dstPort"]
        },
        {
          "type" : "field",
          "value" : ["tcp", "seqNo"]
        },
        {
          "type" : "field",
          "value" : ["tcp", "ackNo"]
        },
        {
          "type" : "field",
          "value" : ["tcp", "dataOffset"]
        },
        {
          "type" : "field",
          "value" : ["tcp", "res"]
        },
        {
          "type" : "field",
          "value" : ["tcp", "flags"]
        },
        {
          "type" : "field",
          "value" : ["tcp", "window"]
        },
        {
          "type" : "field",
          "value" : ["tcp", "urgentPtr"]
        },
        {
          "type" : "payload",
          "value" : null
        }
      ]
    }
  ],
  "learn_lists" : [],
  "actions" : [
    {
      "name" : "NoAction",
      "id" : 0,
      "runtime_data" : [],
      "primitives" : []
    },
    {
      "name" : "NoAction",
      "id" : 1,
      "runtime_data" : [],
      "primitives" : []
    },
    {
      "name" : "NoAction",
      "id" : 2,
      "runtime_data" : [],
      "primitives" : []
    },
    {
      "name" : "c_ingress.set_out_port",
      "id" : 3,
      "runtime_data" : [
        {
          "name" : "port",
          "bitwidth" : 9
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "egress_spec"]
            },
            {
              "type" : "runtime_data",
              "value" : 0
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 304,
            "column" : 8,
            "source_fragment" : "standard_metadata.egress_spec = port"
          }
        }
      ]
    },
    {
      "name" : "c_ingress.send_to_cpu",
      "id" : 4,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "egress_spec"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00ff"
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 28,
            "column" : 24,
            "source_fragment" : "255; ..."
          }
        },
        {
          "op" : "add_header",
          "parameters" : [
            {
              "type" : "header",
              "value" : "packet_in"
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 312,
            "column" : 8,
            "source_fragment" : "hdr.packet_in.setValid()"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["packet_in", "ingress_port"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "field",
                    "value" : ["standard_metadata", "ingress_port"]
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xffff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 313,
            "column" : 8,
            "source_fragment" : "hdr.packet_in.ingress_port = (bit<16>)(standard_metadata.ingress_port)"
          }
        }
      ]
    },
    {
      "name" : "c_ingress._drop",
      "id" : 5,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "mark_to_drop",
          "parameters" : [
            {
              "type" : "header",
              "value" : "standard_metadata"
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 317,
            "column" : 8,
            "source_fragment" : "mark_to_drop(standard_metadata)"
          }
        }
      ]
    },
    {
      "name" : "c_ingress.loadbalancer.hash_header",
      "id" : 6,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp"]
            },
            {
              "type" : "field",
              "value" : ["ipv4", "src_addr"]
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 190,
            "column" : 17,
            "source_fragment" : "hdr.ipv4.src_addr"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_0"]
            },
            {
              "type" : "field",
              "value" : ["tcp", "srcPort"]
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 191,
            "column" : 20,
            "source_fragment" : "hdr.tcp.srcPort"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_1"]
            },
            {
              "type" : "field",
              "value" : ["ipv4", "dst_addr"]
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 192,
            "column" : 20,
            "source_fragment" : "hdr.ipv4.dst_addr"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_2"]
            },
            {
              "type" : "field",
              "value" : ["tcp", "dstPort"]
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 193,
            "column" : 20,
            "source_fragment" : "hdr.tcp.dstPort"
          }
        },
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata_t.hash_val"]
            },
            {
              "type" : "hexstr",
              "value" : "0x0000"
            },
            {
              "type" : "calculation",
              "value" : "calc"
            },
            {
              "type" : "hexstr",
              "value" : "0x03ff"
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 187,
            "column" : 8,
            "source_fragment" : "hash(meta.hash_val, ..."
          }
        }
      ]
    },
    {
      "name" : "c_ingress.loadbalancer._drop",
      "id" : 7,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "mark_to_drop",
          "parameters" : [
            {
              "type" : "header",
              "value" : "standard_metadata"
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 202,
            "column" : 8,
            "source_fragment" : "mark_to_drop(standard_metadata)"
          }
        }
      ]
    },
    {
      "name" : "c_ingress.loadbalancer._drop",
      "id" : 8,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "mark_to_drop",
          "parameters" : [
            {
              "type" : "header",
              "value" : "standard_metadata"
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 202,
            "column" : 8,
            "source_fragment" : "mark_to_drop(standard_metadata)"
          }
        }
      ]
    },
    {
      "name" : "c_ingress.loadbalancer.set_nhop",
      "id" : 9,
      "runtime_data" : [
        {
          "name" : "nhop_dmac",
          "bitwidth" : 48
        },
        {
          "name" : "nhop_ipv4",
          "bitwidth" : 32
        },
        {
          "name" : "port",
          "bitwidth" : 9
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ethernet", "dst_addr"]
            },
            {
              "type" : "runtime_data",
              "value" : 0
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 206,
            "column" : 8,
            "source_fragment" : "hdr.ethernet.dst_addr = nhop_dmac"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ipv4", "dst_addr"]
            },
            {
              "type" : "runtime_data",
              "value" : 1
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 207,
            "column" : 8,
            "source_fragment" : "hdr.ipv4.dst_addr = nhop_ipv4"
          }
        }
      ]
    },
    {
      "name" : "c_ingress.loadbalancer.substitute_src",
      "id" : 10,
      "runtime_data" : [
        {
          "name" : "src_mac",
          "bitwidth" : 48
        },
        {
          "name" : "src_ipv4",
          "bitwidth" : 32
        },
        {
          "name" : "port",
          "bitwidth" : 9
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ethernet", "src_addr"]
            },
            {
              "type" : "runtime_data",
              "value" : 0
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 212,
            "column" : 8,
            "source_fragment" : "hdr.ethernet.src_addr = src_mac"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ipv4", "src_addr"]
            },
            {
              "type" : "runtime_data",
              "value" : 1
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 213,
            "column" : 8,
            "source_fragment" : "hdr.ipv4.src_addr = src_ipv4"
          }
        }
      ]
    },
    {
      "name" : "load_balancer_RR348",
      "id" : 11,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "egress_spec"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "field",
                        "value" : ["packet_out", "egress_port"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x01ff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0x01ff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 348,
            "column" : 12,
            "source_fragment" : "standard_metadata.egress_spec = (bit<9>)(hdr.packet_out.egress_port)"
          }
        },
        {
          "op" : "remove_header",
          "parameters" : [
            {
              "type" : "header",
              "value" : "packet_out"
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 349,
            "column" : 12,
            "source_fragment" : "hdr.packet_out.setInvalid()"
          }
        }
      ]
    },
    {
      "name" : "load_balancer_RR268",
      "id" : 12,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "loadbalancer_temp"]
            },
            {
              "type" : "register_array",
              "value" : "c_ingress.loadbalancer.load_balancer"
            },
            {
              "type" : "hexstr",
              "value" : "0x00000000"
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 268,
            "column" : 24,
            "source_fragment" : "load_balancer.read(temp, 0x00)"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "loadbalancer_temp"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "+",
                      "left" : {
                        "type" : "field",
                        "value" : ["scalars", "loadbalancer_temp"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x0001"
                      }
                    }
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xffff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 269,
            "column" : 24,
            "source_fragment" : "temp = temp + 1"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "c_ingress.loadbalancer.load_balancer"
            },
            {
              "type" : "hexstr",
              "value" : "0x00000000"
            },
            {
              "type" : "field",
              "value" : ["scalars", "loadbalancer_temp"]
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 270,
            "column" : 24,
            "source_fragment" : "load_balancer.write(0x00, temp)"
          }
        },
        {
          "op" : "register_write",
          "parameters" : [
            {
              "type" : "register_array",
              "value" : "c_ingress.loadbalancer.state"
            },
            {
              "type" : "field",
              "value" : ["scalars", "metadata_t.hash_val"]
            },
            {
              "type" : "field",
              "value" : ["scalars", "loadbalancer_temp"]
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 271,
            "column" : 24,
            "source_fragment" : "state.write(meta.hash_val, temp)"
          }
        }
      ]
    },
    {
      "name" : "load_balancer_RR260",
      "id" : 13,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "loadbalancer_state_temp"]
            },
            {
              "type" : "register_array",
              "value" : "c_ingress.loadbalancer.state"
            },
            {
              "type" : "field",
              "value" : ["scalars", "metadata_t.hash_val"]
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 260,
            "column" : 16,
            "source_fragment" : "state.read(state_temp, meta.hash_val)"
          }
        }
      ]
    },
    {
      "name" : "load_balancer_RR273",
      "id" : 14,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "register_read",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata_t.current_output"]
            },
            {
              "type" : "register_array",
              "value" : "c_ingress.loadbalancer.state"
            },
            {
              "type" : "field",
              "value" : ["scalars", "metadata_t.hash_val"]
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 273,
            "column" : 16,
            "source_fragment" : "state.read(meta.current_output, meta.hash_val)"
          }
        }
      ]
    },
    {
      "name" : "load_balancer_RR360",
      "id" : 15,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_3"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "field",
                    "value" : ["standard_metadata", "egress_spec"]
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xffffffff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 360,
            "column" : 34,
            "source_fragment" : "(bit<32>) standard_metadata.egress_spec"
          }
        },
        {
          "op" : "count",
          "parameters" : [
            {
              "type" : "counter_array",
              "value" : "c_ingress.tx_port_counter"
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_3"]
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 360,
            "column" : 12,
            "source_fragment" : "tx_port_counter.count((bit<32>) standard_metadata.egress_spec)"
          }
        }
      ]
    },
    {
      "name" : "load_balancer_RR363",
      "id" : 16,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp_4"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "field",
                    "value" : ["standard_metadata", "ingress_port"]
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xffffffff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 363,
            "column" : 34,
            "source_fragment" : "(bit<32>) standard_metadata.ingress_port"
          }
        },
        {
          "op" : "count",
          "parameters" : [
            {
              "type" : "counter_array",
              "value" : "c_ingress.rx_port_counter"
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp_4"]
            }
          ],
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 363,
            "column" : 12,
            "source_fragment" : "rx_port_counter.count((bit<32>) standard_metadata.ingress_port)"
          }
        }
      ]
    }
  ],
  "pipelines" : [
    {
      "name" : "ingress",
      "id" : 0,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 290,
        "column" : 8,
        "source_fragment" : "c_ingress"
      },
      "init_table" : "node_2",
      "tables" : [
        {
          "name" : "tbl_load_balancer_RR348",
          "id" : 0,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 348,
            "column" : 42,
            "source_fragment" : "= (bit<9>)(hdr.packet_out.egress_port); ..."
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [11],
          "actions" : ["load_balancer_RR348"],
          "base_default_next" : "node_13",
          "next_tables" : {
            "load_balancer_RR348" : "node_13"
          },
          "default_entry" : {
            "action_id" : 11,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_loadbalancer_hash_header",
          "id" : 1,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 255,
            "column" : 12,
            "source_fragment" : "hash_header()"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [6],
          "actions" : ["c_ingress.loadbalancer.hash_header"],
          "base_default_next" : "c_ingress.loadbalancer.other_direction",
          "next_tables" : {
            "c_ingress.loadbalancer.hash_header" : "c_ingress.loadbalancer.other_direction"
          },
          "default_entry" : {
            "action_id" : 6,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "c_ingress.loadbalancer.other_direction",
          "id" : 2,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 234,
            "column" : 10,
            "source_fragment" : "other_direction"
          },
          "key" : [
            {
              "match_type" : "exact",
              "name" : "hdr.ipv4.src_addr",
              "target" : ["ipv4", "src_addr"],
              "mask" : null
            }
          ],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : true,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [8, 10, 2],
          "actions" : ["c_ingress.loadbalancer._drop", "c_ingress.loadbalancer.substitute_src", "NoAction"],
          "base_default_next" : null,
          "next_tables" : {
            "__MISS__" : "tbl_load_balancer_RR260",
            "__HIT__" : "c_ingress.t_l2_fwd"
          },
          "default_entry" : {
            "action_id" : 2,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        },
        {
          "name" : "tbl_load_balancer_RR260",
          "id" : 3,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 260,
            "column" : 16,
            "source_fragment" : "state.read(state_temp, meta.hash_val)"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [13],
          "actions" : ["load_balancer_RR260"],
          "base_default_next" : "node_8",
          "next_tables" : {
            "load_balancer_RR260" : "node_8"
          },
          "default_entry" : {
            "action_id" : 13,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_load_balancer_RR268",
          "id" : 4,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 268,
            "column" : 24,
            "source_fragment" : "load_balancer.read(temp, 0x00); ..."
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [12],
          "actions" : ["load_balancer_RR268"],
          "base_default_next" : "tbl_load_balancer_RR273",
          "next_tables" : {
            "load_balancer_RR268" : "tbl_load_balancer_RR273"
          },
          "default_entry" : {
            "action_id" : 12,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_load_balancer_RR273",
          "id" : 5,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 273,
            "column" : 16,
            "source_fragment" : "state.read(meta.current_output, meta.hash_val)"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [14],
          "actions" : ["load_balancer_RR273"],
          "base_default_next" : "c_ingress.loadbalancer.http_load_balancer",
          "next_tables" : {
            "load_balancer_RR273" : "c_ingress.loadbalancer.http_load_balancer"
          },
          "default_entry" : {
            "action_id" : 14,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "c_ingress.loadbalancer.http_load_balancer",
          "id" : 6,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 218,
            "column" : 10,
            "source_fragment" : "http_load_balancer"
          },
          "key" : [
            {
              "match_type" : "exact",
              "name" : "hdr.ipv4.dst_addr",
              "target" : ["ipv4", "dst_addr"],
              "mask" : null
            },
            {
              "match_type" : "ternary",
              "name" : "meta.current_output",
              "target" : ["scalars", "metadata_t.current_output"],
              "mask" : null
            }
          ],
          "match_type" : "ternary",
          "type" : "simple",
          "max_size" : 2,
          "with_counters" : true,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [9, 7, 1],
          "actions" : ["c_ingress.loadbalancer.set_nhop", "c_ingress.loadbalancer._drop", "NoAction"],
          "base_default_next" : "c_ingress.t_l2_fwd",
          "next_tables" : {
            "c_ingress.loadbalancer.set_nhop" : "c_ingress.t_l2_fwd",
            "c_ingress.loadbalancer._drop" : "c_ingress.t_l2_fwd",
            "NoAction" : "c_ingress.t_l2_fwd"
          },
          "default_entry" : {
            "action_id" : 1,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        },
        {
          "name" : "c_ingress.t_l2_fwd",
          "id" : 7,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 323,
            "column" : 10,
            "source_fragment" : "t_l2_fwd"
          },
          "key" : [
            {
              "match_type" : "ternary",
              "name" : "standard_metadata.ingress_port",
              "target" : ["standard_metadata", "ingress_port"],
              "mask" : null
            },
            {
              "match_type" : "ternary",
              "name" : "hdr.ethernet.dst_addr",
              "target" : ["ethernet", "dst_addr"],
              "mask" : null
            },
            {
              "match_type" : "ternary",
              "name" : "hdr.ethernet.src_addr",
              "target" : ["ethernet", "src_addr"],
              "mask" : null
            },
            {
              "match_type" : "ternary",
              "name" : "hdr.ethernet.ether_type",
              "target" : ["ethernet", "ether_type"],
              "mask" : null
            }
          ],
          "match_type" : "ternary",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : true,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [3, 4, 5, 0],
          "actions" : ["c_ingress.set_out_port", "c_ingress.send_to_cpu", "c_ingress._drop", "NoAction"],
          "base_default_next" : "node_13",
          "next_tables" : {
            "c_ingress.set_out_port" : "node_13",
            "c_ingress.send_to_cpu" : "node_13",
            "c_ingress._drop" : "node_13",
            "NoAction" : "node_13"
          },
          "default_entry" : {
            "action_id" : 0,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        },
        {
          "name" : "tbl_load_balancer_RR360",
          "id" : 8,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 360,
            "column" : 12,
            "source_fragment" : "tx_port_counter.count((bit<32>) standard_metadata.egress_spec)"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [15],
          "actions" : ["load_balancer_RR360"],
          "base_default_next" : "node_15",
          "next_tables" : {
            "load_balancer_RR360" : "node_15"
          },
          "default_entry" : {
            "action_id" : 15,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_load_balancer_RR363",
          "id" : 9,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 363,
            "column" : 12,
            "source_fragment" : "rx_port_counter.count((bit<32>) standard_metadata.ingress_port)"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [16],
          "actions" : ["load_balancer_RR363"],
          "base_default_next" : null,
          "next_tables" : {
            "load_balancer_RR363" : null
          },
          "default_entry" : {
            "action_id" : 16,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        }
      ],
      "action_profiles" : [],
      "conditionals" : [
        {
          "name" : "node_2",
          "id" : 0,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 343,
            "column" : 12,
            "source_fragment" : "standard_metadata.ingress_port == CPU_PORT"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "==",
              "left" : {
                "type" : "field",
                "value" : ["standard_metadata", "ingress_port"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x00ff"
              }
            }
          },
          "true_next" : "tbl_load_balancer_RR348",
          "false_next" : "node_4"
        },
        {
          "name" : "node_4",
          "id" : 1,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 253,
            "column" : 12,
            "source_fragment" : "hdr.tcp.isValid()"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "d2b",
              "left" : null,
              "right" : {
                "type" : "field",
                "value" : ["tcp", "$valid$"]
              }
            }
          },
          "true_next" : "tbl_loadbalancer_hash_header",
          "false_next" : "c_ingress.t_l2_fwd"
        },
        {
          "name" : "node_8",
          "id" : 2,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 264,
            "column" : 19,
            "source_fragment" : "state_temp == 0"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "==",
              "left" : {
                "type" : "field",
                "value" : ["scalars", "loadbalancer_state_temp"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x0000"
              }
            }
          },
          "true_next" : "tbl_load_balancer_RR268",
          "false_next" : "tbl_load_balancer_RR273"
        },
        {
          "name" : "node_13",
          "id" : 3,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 359,
            "column" : 12,
            "source_fragment" : "standard_metadata.egress_spec < 255"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "<",
              "left" : {
                "type" : "field",
                "value" : ["standard_metadata", "egress_spec"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x00ff"
              }
            }
          },
          "true_next" : "tbl_load_balancer_RR360",
          "false_next" : "node_15"
        },
        {
          "name" : "node_15",
          "id" : 4,
          "source_info" : {
            "filename" : "load_balancer_RR.p4",
            "line" : 362,
            "column" : 12,
            "source_fragment" : "standard_metadata.ingress_port < 255"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "<",
              "left" : {
                "type" : "field",
                "value" : ["standard_metadata", "ingress_port"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x00ff"
              }
            }
          },
          "false_next" : null,
          "true_next" : "tbl_load_balancer_RR363"
        }
      ]
    },
    {
      "name" : "egress",
      "id" : 1,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 372,
        "column" : 8,
        "source_fragment" : "c_egress"
      },
      "init_table" : null,
      "tables" : [],
      "action_profiles" : [],
      "conditionals" : []
    }
  ],
  "checksums" : [
    {
      "name" : "cksum",
      "id" : 0,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 393,
        "column" : 8,
        "source_fragment" : "update_checksum( ..."
      },
      "target" : ["ipv4", "hdr_checksum"],
      "type" : "generic",
      "calculation" : "calc_0",
      "verify" : false,
      "update" : true,
      "if_cond" : {
        "type" : "expression",
        "value" : {
          "op" : "d2b",
          "left" : null,
          "right" : {
            "type" : "field",
            "value" : ["ipv4", "$valid$"]
          }
        }
      }
    },
    {
      "name" : "cksum_0",
      "id" : 1,
      "source_info" : {
        "filename" : "load_balancer_RR.p4",
        "line" : 411,
        "column" : 8,
        "source_fragment" : "update_checksum_with_payload( ..."
      },
      "target" : ["tcp", "checksum"],
      "type" : "generic",
      "calculation" : "calc_1",
      "verify" : false,
      "update" : true,
      "if_cond" : {
        "type" : "expression",
        "value" : {
          "op" : "d2b",
          "left" : null,
          "right" : {
            "type" : "field",
            "value" : ["tcp", "$valid$"]
          }
        }
      }
    }
  ],
  "force_arith" : [],
  "extern_instances" : [],
  "field_aliases" : [
    [
      "queueing_metadata.enq_timestamp",
      ["standard_metadata", "enq_timestamp"]
    ],
    [
      "queueing_metadata.enq_qdepth",
      ["standard_metadata", "enq_qdepth"]
    ],
    [
      "queueing_metadata.deq_timedelta",
      ["standard_metadata", "deq_timedelta"]
    ],
    [
      "queueing_metadata.deq_qdepth",
      ["standard_metadata", "deq_qdepth"]
    ],
    [
      "intrinsic_metadata.ingress_global_timestamp",
      ["standard_metadata", "ingress_global_timestamp"]
    ],
    [
      "intrinsic_metadata.egress_global_timestamp",
      ["standard_metadata", "egress_global_timestamp"]
    ],
    [
      "intrinsic_metadata.mcast_grp",
      ["standard_metadata", "mcast_grp"]
    ],
    [
      "intrinsic_metadata.egress_rid",
      ["standard_metadata", "egress_rid"]
    ],
    [
      "intrinsic_metadata.priority",
      ["standard_metadata", "priority"]
    ]
  ],
  "program" : "load_balancer_RR.p4",
  "__meta__" : {
    "version" : [2, 23],
    "compiler" : "https://github.com/p4lang/p4c"
  }
}